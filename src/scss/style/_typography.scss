@use 'sass:map';
@use '@tokens' as tokens;
@use '../settings/settings';
@use '../tools/units';

.cc_div {
    $_line-height: map.get(tokens.$body-medium-text-regular, 'mobile', 'line-height');

    font-family: var(--lmcccm-p-font-family);
    font-size: var(--lmcccm-p-base-font-size);
    line-height: $_line-height;

    & *,
    &::after,
    &::before {
        line-height: $_line-height;
    }

    strong {
        font-weight: map.get(tokens.$body-medium-text-bold, 'mobile', 'font-weight');
    }
}

#c-txt p:not(:last-child) {
    margin-bottom: units.convert2em(tokens.$space-600);
}

#c-ttl,
#s-ttl {
    $_font-size: units.convert2em(map.get(tokens.$heading-small-text, 'desktop', 'font-size'));

    margin-bottom: units.convert2em(tokens.$space-600, $current-font-size: $_font-size);
    font-weight: map.get(tokens.$heading-small-text, 'mobile', 'font-weight');
    font-size: $_font-size;
    line-height: map.get(tokens.$heading-medium-text, 'mobile', 'line-height');

    @media screen and (max-width: settings.$breakpoint-desktop-down) {
        font-size: units.convert2em(map.get(tokens.$heading-small-text, 'tablet', 'font-size'));
    }

    @media screen and (max-width: settings.$breakpoint-tablet-down) {
        font-size: units.convert2em(map.get(tokens.$heading-small-text, 'mobile', 'font-size'));
    }
}

#c-txt,
.cc_div .cloud #c-txt {
    margin-bottom: 0;
    font-size: units.convert2em(map.get(tokens.$body-medium-text-regular, 'mobile', 'font-size'));
    line-height: inherit;
}
